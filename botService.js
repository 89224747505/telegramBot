const axios = require('axios');
const { EMA, MACD, RSI, ADX, ATR } = require('technicalindicators');

class BotService {

volumeWeightedAveragePriceIndicator(candles, length) {
    let cumulativeTPV = 0;   // Typical Price * Volume
    let cumulativeVolume = 0;
  
    // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ length —Å–≤–µ—á–µ–π
    const relevantCandles = candles.slice(-length);
    relevantCandles.forEach(candle => {
      const high = parseFloat(candle[2]);
      const low = parseFloat(candle[3]);
      const close = parseFloat(candle[4]);
      const volume = parseFloat(candle[5]);
  
      const typicalPrice = (high + low + close) / 3;
  
      cumulativeTPV += typicalPrice * volume;
      cumulativeVolume += volume;
    });
  
    const vwap = cumulativeTPV / cumulativeVolume;
    return vwap;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  channelBreakoutSignalIndicator - –º–µ—Ç–æ–¥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –≤ –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø–µ—Ä–µ—Å–µ–∫–ª–∏ –∫–∞–Ω–∞–ª
////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

async channelBreakoutSignalIndicator(SYMBOL, TIMEFRAME, LENGTH = 5, settings) {
    const tickSize = await this.getTickSizeBybit(SYMBOL, settings);
    if (!tickSize) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å tickSize. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.");
        return false;
    }

    const candles = await this.fetchKlines(SYMBOL, TIMEFRAME, LENGTH + 1, settings);
    if (candles.length < LENGTH + 1) return null;

    const highs = candles.map(c => parseFloat(c[2])); // –ú–∞–∫—Å–∏–º—É–º—ã —Å–≤–µ—á–µ–π
    const lows = candles.map(c => parseFloat(c[3]));  // –ú–∏–Ω–∏–º—É–º—ã —Å–≤–µ—á–µ–π
    const closes = candles.map(c => parseFloat(c[4])); // –ó–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–µ–π

    const upBound = Math.max(...highs.slice(0, LENGTH));
    const downBound = Math.min(...lows.slice(0, LENGTH));

    const lastClose = closes[closes.length - 1];
    
    if (lastClose >= upBound + tickSize) {
        return { signal: "LONG", level: upBound };
    } else if (lastClose <= downBound - tickSize) {
        return { signal: "SHORT", level: downBound };
    }
    return { signal: "NONE" };
}

volumeMinHighAverage(candles, average_candles_period) {
    let minVolume, averageVolume, currentVolume;

    const volumes = candles.map(candle => parseFloat(candle[5]));
    volumes.reverse();

    minVolume = Math.min(...volumes);
    averageVolume = volumes.slice(0, average_candles_period).reduce((a, b) => a + b, 0) / average_candles_period;

    currentVolume = volumes[0]; // –°–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä—ë–º –ø–æ—Å–ª–µ reverse()
    
    return [minVolume, averageVolume, currentVolume];
}    
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  trendSignalEmaFastSlow - –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π EMA –º–µ–¥–ª–µ–Ω–Ω–æ–π
////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

async trendSignalEmaFastSlow(ema_fast_period, ema_slow_period, closes) {
    
    const emaFast = EMA.calculate({ period: ema_fast_period, values: closes });
    const emaSlow = EMA.calculate({ period: ema_slow_period, values: closes });

    const ema_trend_fast_slow = emaFast[emaFast.length - 1] >= emaSlow[emaSlow.length - 1] ? 'Bullish' : 'Bearish';
    
    return ema_trend_fast_slow;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  calculateIndicators - –º–µ—Ç–æ–¥ —Ä–∞—Å—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


async calculateIndicators(symbol, settings, flag = false, isSignal = false) {
    
    const {
        TIMEFRAME,
        LENGTH_BREAKOUT,
        AVERAGE_CANDLES_PERIOD,
        EMA_FAST_PERIOD,
        EMA_SLOW_PERIOD,
        TIMEFRAMES,
        VOLUME_MULTIPLIER
    } = settings;

    //–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∞—Ç–æ—Ä–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –≤—ã—Ö–æ–¥ –∏–∑ –º–µ—Ç–æ–¥–∞ –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç
    const channelBreakout = await this.channelBreakoutSignalIndicator(symbol, TIMEFRAME, LENGTH_BREAKOUT, settings)
    if (!flag && channelBreakout.signal === 'NONE') return false;
    
    //–ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É. –ö–æ–ª-–≤–æ —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ ema_slow
    const candles = await this.fetchKlines(symbol, TIMEFRAME, EMA_SLOW_PERIOD, settings);
    const closes = candles.map(c => parseFloat(c[4])); // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–≤–µ—á–µ–π
    const highs = candles.map(c => parseFloat(c[2])); // –º–∞–∫—Å–∏–º—É–º—ã
    const lows = candles.map(c => parseFloat(c[3])); // –º–∏–Ω–∏–º—É–º—ã
    const currentPrice = candles[candles.length - 1][4]; // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (Close –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏)

    //–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è 
    const ema_trend_fast_slow = await this.trendSignalEmaFastSlow(EMA_FAST_PERIOD, EMA_SLOW_PERIOD, closes);
    
    //–†–∞—Å—á–µ—Ç VWAP —Å —Ç–µ–º –∂–µ –ø–µ—Ä–∏–æ–¥–æ–º —á—Ç–æ –∏ channel breakout
    const VWAP = this.volumeWeightedAveragePriceIndicator(candles, LENGTH_BREAKOUT)
    
    //–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∞–∫—Ç–æ—Ä–æ–≤
    const isValidSignal = (
        (channelBreakout.signal === 'LONG' && ema_trend_fast_slow === 'Bullish') ||
        (channelBreakout.signal === 'SHORT' && ema_trend_fast_slow === 'Bearish')
      );
      
    //   if (isSignal && !isValidSignal) {
    //     return false;
    //   }
    // console.log(symbol, ' - ', channelBreakout.signal, ' - ', ema_trend_fast_slow);

      if (isSignal && channelBreakout.signal === 'NONE') {
        return false;
      }

    //–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏ —Å—Ä–µ–¥–Ω–∏—Ö –æ–±—ä–µ–º–æ–≤. –ò –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Ä–æ—Å—Ç –æ–±—ä–µ–º–æ–≤ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –º–µ–∂–¥—É —Å—Ä–µ–¥–Ω–∏–º –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–º
    const [minVolume, averageVolume, currentVolume] = this.volumeMinHighAverage(candles, AVERAGE_CANDLES_PERIOD);

    if (!flag && minVolume * VOLUME_MULTIPLIER > averageVolume) {
        return false;
    }

    // MACD 12, 26, 9
    const macdResult = MACD.calculate({
        values: closes,
        fastPeriod: 12,
        slowPeriod: 26,
        signalPeriod: 9,
        SimpleMAOscillator: false,
        SimpleMASignal: false
    });
    const macdCross = macdResult.length > 1 && (macdResult[macdResult.length - 1].MACD > macdResult[macdResult.length - 1].signal);

    // RSI 13, RSI 5 –∏ RSI 14
    const rsi13 = RSI.calculate({ period: 13, values: closes });
    const rsi5 = RSI.calculate({ period: 5, values: closes });
    const lastRSI13 = rsi13[rsi13.length - 1] || 50;
    const lastRSI5 = rsi5[rsi5.length - 1] || 50;

    // EMA 5, EMA 11, EMA 13 –∏ EMA 36
    const ema5 = EMA.calculate({ period: 5, values: closes });
    const ema11 = EMA.calculate({ period: 11, values: closes });
    const ema13 = EMA.calculate({ period: 13, values: closes });
    const ema36 = EMA.calculate({ period: 36, values: closes });

    const trendBar1 = ema5.length > 1 && ema5[ema5.length - 1] > ema11[ema11.length - 1];
    const trendBar2 = ema13.length > 1 && ema13[ema13.length - 1] > ema36[ema36.length - 1];
   
    const bullish = `üü¢`;
    const bearish = `üî¥`;
    
    // MACD –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
    const macdValues = {};
    let sumVectors = 0;
    for (const timeframe of TIMEFRAMES) {
        const candles = await this.fetchKlines(symbol, timeframe, EMA_SLOW_PERIOD, settings);
        const closes = candles.map(c => parseFloat(c[4]));
        
        const macdResult = MACD.calculate({
            values: closes,
            fastPeriod: 12,
            slowPeriod: 26,
            signalPeriod: 9,
            SimpleMAOscillator: false,
            SimpleMASignal: false
        });
        
        if (macdResult.length > 1) {
            const currentMACD = macdResult[macdResult.length - 1].MACD;
            const currentSignal = macdResult[macdResult.length - 1].signal;
            const currentHistogram = macdResult[macdResult.length - 1].histogram;
            const previousHistogram = macdResult[macdResult.length - 2].histogram;
            
            // –¶–≤–µ—Ç –∫—Ä—É–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞–∫–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã

            const circle = currentHistogram > 0 ? 'üü¢' : 'üî¥';
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            const arrow = currentHistogram > previousHistogram ? 'üîº' : 'üîΩ';

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—ã –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            const vector = currentHistogram - previousHistogram;
            
            //–ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫ —Å—É–º–º–µ –≤–µ–∫—Ç–æ—Ä–æ–≤
            sumVectors+=Number(vector);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ MACD –∫ Signal, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç
            const limit = Math.abs(currentMACD) < 0.5 * Math.abs(currentSignal) ? '‚ö†Ô∏è' : '';

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∑–Ω–∞—á–æ–∫
            macdValues[timeframe] = { value: currentHistogram, vector: vector, sumVectors: sumVectors, circle: circle, arrow: arrow, limit: limit };
            
        }
    }

    // Trend Meter Calculation
    const trendMeter1 = macdCross ? bullish : bearish;
    const trendMeter2 = lastRSI13 > 50 ? bullish : bearish;
    const trendMeter3 = lastRSI5 > 50 ? bullish : bearish;
    let trendMeterSignal = 'No';
    
    if (macdCross && lastRSI13 > 50 && lastRSI5 > 50) {
        trendMeterSignal = 'Bullish';
    } else if (!macdCross && lastRSI13 <= 50 && lastRSI5 <= 50) {
        trendMeterSignal = 'Bearish';
    }

    // ADX & ATR —Ä–∞—Å—á–µ—Ç
    const adxPeriod = 14; // –û–±—ã—á–Ω–æ 14 –ø–µ—Ä–∏–æ–¥–æ–≤
    const atrPeriod = 14;

    const adxResult = ADX.calculate({
        close: closes,
        high: highs,
        low: lows,
        period: adxPeriod
    });
    const atrResult = ATR.calculate({
        close: closes,
        high: highs,
        low: lows,
        period: atrPeriod
    });

    const lastADX = adxResult.length > 0 ? adxResult[adxResult.length - 1].adx : 0;
    const lastATR = atrResult.length > 0 ? atrResult[atrResult.length - 1] : 0;
    
    // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ ATR –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    const avgATR = atrResult.reduce((a, b) => a + b, 0) / atrResult.length;

    return `
\`\`\`
‚úÖ ${symbol} –¢–∞–π–º—Ñ—Ä–µ–π–º ${TIMEFRAME}–º
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å             ‚îÇ –ó–Ω–∞—á–µ–Ω–∏–µ  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞           ‚îÇ ${currentPrice} 
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º          ‚îÇ ${currentVolume.toFixed(2)} 
‚îÇ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º          ‚îÇ ${averageVolume.toFixed(2)} 
‚îÇ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º      ‚îÇ ${minVolume.toFixed(2)} 
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ADX                    ‚îÇ ${lastADX.toFixed(2)} 
‚îÇ ATR —Å—Ä–µ–¥–Ω—è—è            ‚îÇ ${avgATR.toFixed(2)} 
‚îÇ ATR                    ‚îÇ ${lastATR.toFixed(2)} 
‚îÇ VWAP                   ‚îÇ ${VWAP.toFixed(0)} ${VWAP < currentPrice ? 'üü¢' : 'üî¥'} 
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –°–∏–≥–Ω–∞–ª                 ‚îÇ ${channelBreakout.signal !== 'NONE' ? channelBreakout.signal : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} 
‚îÇ –£—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞          ‚îÇ ${channelBreakout.signal !== 'NONE' ? channelBreakout.level : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} 
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –ü–µ—Ä–∏–æ–¥ –±—ã—Å—Ç—Ä–æ–π EMA     ‚îÇ ${EMA_FAST_PERIOD} 
‚îÇ –ü–µ—Ä–∏–æ–¥ –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA   ‚îÇ ${EMA_SLOW_PERIOD} 
‚îÇ EMA —Ç—Ä–µ–Ω–¥              ‚îÇ ${ema_trend_fast_slow === 'Bullish' ? bullish : bearish} 
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Trend Signal           ‚îÇ ${trendMeterSignal === 'Bullish' ? bullish : bearish} 
‚îÇ TrendMeter1            ‚îÇ ${trendMeter1} 
‚îÇ TrendMeter2            ‚îÇ ${trendMeter2} 
‚îÇ TrendMeter3            ‚îÇ ${trendMeter3} 
‚îÇ TrendBar1              ‚îÇ ${trendBar1 ? bullish : bearish} 
‚îÇ TrendBar2              ‚îÇ ${trendBar2 ? bullish : bearish} 
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –°—É–º–º–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤         ‚îÇ ${sumVectors.toFixed(2)} 
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

MACD —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ TF   ‚îÇ –°–∏–≥–Ω–∞–ª ‚îÇ –ó–Ω–∞—á–µ–Ω–∏–µ  ‚îÇ –í–µ–∫—Ç–æ—Ä  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  1m  ‚îÇ ${macdValues['1']?.circle}${macdValues['1']?.arrow} ‚îÇ ${macdValues['1']?.value?.toFixed(5)}   ${macdValues['1']?.vector?.toFixed(5)}   ${macdValues['1']?.limit} 
‚îÇ  3m  ‚îÇ ${macdValues['3']?.circle}${macdValues['3']?.arrow} ‚îÇ ${macdValues['3']?.value?.toFixed(5)}   ${macdValues['3']?.vector?.toFixed(5)}   ${macdValues['3']?.limit} 
‚îÇ  5m  ‚îÇ ${macdValues['5']?.circle}${macdValues['5']?.arrow} ‚îÇ ${macdValues['5']?.value?.toFixed(5)}   ${macdValues['5']?.vector?.toFixed(5)}   ${macdValues['5']?.limit} 
‚îÇ 15m  ‚îÇ ${macdValues['15']?.circle}${macdValues['15']?.arrow} ‚îÇ ${macdValues['15']?.value?.toFixed(5)}   ${macdValues['15']?.vector?.toFixed(5)}   ${macdValues['15']?.limit} 
‚îÇ 30m  ‚îÇ ${macdValues['30']?.circle}${macdValues['30']?.arrow} ‚îÇ ${macdValues['30']?.value?.toFixed(5)}   ${macdValues['30']?.vector?.toFixed(5)}   ${macdValues['30']?.limit} 
‚îÇ  1h  ‚îÇ ${macdValues['60']?.circle}${macdValues['60']?.arrow} ‚îÇ ${macdValues['60']?.value?.toFixed(5)}   ${macdValues['60']?.vector?.toFixed(5)}   ${macdValues['60']?.limit} 
‚îÇ  2h  ‚îÇ ${macdValues['120']?.circle}${macdValues['120']?.arrow} ‚îÇ ${macdValues['120']?.value?.toFixed(5)}   ${macdValues['120']?.vector?.toFixed(5)}   ${macdValues['120']?.limit} 
‚îÇ  4h  ‚îÇ ${macdValues['240']?.circle}${macdValues['240']?.arrow} ‚îÇ ${macdValues['240']?.value?.toFixed(5)}   ${macdValues['240']?.vector?.toFixed(5)}   ${macdValues['240']?.limit} 
‚îÇ  6h  ‚îÇ ${macdValues['360']?.circle}${macdValues['360']?.arrow} ‚îÇ ${macdValues['360']?.value?.toFixed(5)}   ${macdValues['360']?.vector?.toFixed(5)}   ${macdValues['360']?.limit} 
‚îÇ 12h  ‚îÇ ${macdValues['720']?.circle}${macdValues['720']?.arrow} ‚îÇ ${macdValues['720']?.value?.toFixed(5)}   ${macdValues['720']?.vector?.toFixed(5)}   ${macdValues['720']?.limit} 
‚îÇ  1D  ‚îÇ ${macdValues['D']?.circle}${macdValues['D']?.arrow} ‚îÇ ${macdValues['D']?.value?.toFixed(5)}   ${macdValues['D']?.vector?.toFixed(5)}   ${macdValues['D']?.limit} 
‚îÇ  1W  ‚îÇ ${macdValues['W']?.circle}${macdValues['W']?.arrow} ‚îÇ ${macdValues['W']?.value?.toFixed(5)}   ${macdValues['W']?.vector?.toFixed(5)}   ${macdValues['W']?.limit} 
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`
`;    
   
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  getFuturesSymbols - –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å API Bybit –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞ turnover
////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

async getFuturesSymbols(botInstance, chatId, settings, coin = '', isSignal = false) {
    const { TURNOVER, URL_TICKERS } = settings;

    if (coin) {
        const data = await this.calculateIndicators(coin, settings, true, isSignal);
                
        if (data) botInstance.sendMessage(chatId, data, { parse_mode: 'Markdown' });

    } else {

        try {
            const response = await axios.get(URL_TICKERS);
            if (response.data.retCode === 0) {

                const symbols = response.data.result.list.filter(symbol => parseFloat(symbol.turnover24h) >= TURNOVER);
            
                for (const symbol of symbols) {
                    
                    const data = await this.calculateIndicators(symbol.symbol, settings, false, isSignal);
                    
                    if (data) botInstance.sendMessage(chatId, data, { parse_mode: 'Markdown' });
                }

            } else {
                console.log('Error: ', response.data.ret_msg);
            }
        } catch (error) {
            console.error('Error fetching data from Bybit API:', error);
        }
    }
}    
    
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  fetchKlines - –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É —Å API Bybit
////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

async fetchKlines(symbol, interval, lookback, settings) {
    const {URL_KLINES} = settings;
    try {
        
        const response = await axios.get(URL_KLINES, {
            params: {
                symbol: symbol,
                category: 'linear',
                interval: interval,
                start: Date.now() - (lookback + 1) * 60000 * parseInt(interval),
                end: Date.now()     //- 60000 * parseInt(interval)
            }
        });
        
        return response.data.result.list.reverse(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤, —Ç–∞–∫ –∫–∞–∫ Bybit –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –µ–≥–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

    } catch(e) {
        return false;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  getTickSize - –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö c API Bybit –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–µ —Ç–∏–∫–∞ –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

async getTickSizeBybit(symbol, settings, category = "linear") {
    const { URL_INFO } = settings;

    const response = await fetch(`${URL_INFO}?category=${category}&symbol=${symbol}`);
    const data = await response.json();
    
    if (data.retCode === 0 && data.result?.list?.length > 0) {
        const tickSize = data.result.list[0].priceFilter.tickSize;
        return parseFloat(tickSize);
    } else {
        throw new Error("Symbol not found or API error");
    }
}

}

module.exports = new BotService();